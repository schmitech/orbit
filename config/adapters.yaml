# Adapter configurations for ORBIT
# This file contains all adapter definitions and can be imported by config.yaml

adapters:
  - name: "conversational-passthrough"
    enabled: true
    type: "passthrough"  # New adapter type for non-retrieval adapters
    datasource: "none"  # No actual datasource needed
    adapter: "conversational"
    implementation: "implementations.passthrough.conversational.ConversationalImplementation"
    # inference_provider: "ollama"  # Override default
    # model: "gpt-oss:20b"  # Specific model for this adapter
    
  # This is an example of a QA adapter for a SQL database.
  # It is used as an example of how to create a QA adapter for a SQL database.
  # Run /examples/sample-db-setup.sh sqlite to create a sample database and api key before using this adapter.
  - name: "qa-sql"
    enabled: false
    type: "retriever"
    datasource: "sqlite"
    adapter: "qa"
    implementation: "retrievers.implementations.qa.QASSQLRetriever"
    # inference_provider: "ollama"
    # model: "gpt-oss:20b"
    config:
      # QA-specific settings
      confidence_threshold: 0.3
      max_results: 5
      return_results: 3
      
      # Unified retriever features (available for all SQL adapters)
      use_connection_pool: false  # SQLite doesn't support traditional pooling (file-based)
      pool_size: 1  # Not applicable for SQLite
      connection_timeout: 30  # Connection timeout in seconds
      
      # Query monitoring (automatically provided by unified base)
      enable_query_monitoring: true
      query_timeout: 5000  # 5 seconds
      
      # Security and access control (recommended)
      table: "city"  # Specify the exact table for single-table access
      allowed_columns: ["id", "question", "answer", "category", "confidence"]  # Limit accessible columns
      security_filter: "active = 1"  # Only return active Q&A pairs
      
      # Performance optimization
      cache_ttl: 1800  # Cache results for 30 minutes
      
    # Fault tolerance settings for this adapter. This overrides the default settings in config.yaml
    # Use this as example for other adapters if you need to override the default settings.
    fault_tolerance:
      operation_timeout: 15.0          # Lower timeout for local database operations
      failure_threshold: 10            # Higher threshold for local operations (more reliable)
      recovery_timeout: 30.0           # Short base timeout for local DB
      success_threshold: 5             # Multiple successes to close circuit
      max_recovery_timeout: 120.0      # Max 2 minutes for local DB
      enable_exponential_backoff: true # Enable backoff for local DB
      enable_thread_isolation: false   # No isolation needed for local SQLite operations
      enable_process_isolation: false  # SQLite is lightweight, no process isolation needed
      max_retries: 3                   # Retry failed queries
      retry_delay: 0.5                 # Short delay between retries for local DB
      cleanup_interval: 3600.0         # Clean up stats every hour
      retention_period: 86400.0        # Keep stats for 24 hours
      event_handler:
        type: "default"                # Use default filesystem logger
      
  # This is an example of a QA adapter for a ChromaDB database. (Disabled by default)
  # It is used as an example of how to create a QA adapter for a ChromaDB database.
  - name: "qa-vector-chroma"
    enabled: false
    type: "retriever"
    datasource: "chroma"
    adapter: "qa"
    implementation: "retrievers.implementations.qa.QAChromaRetriever"
    # inference_provider: "ollama"
    # embedding_provider: "ollama"
    config:
      collection: "city"
      confidence_threshold: 0.3
      distance_scaling_factor: 2.0
      max_results: 5
      return_results: 3
      timezone: "America/Toronto"

  - name: "qa-vector-qdrant-demo"
    enabled: false
    type: "retriever"
    datasource: "qdrant"
    adapter: "qa"
    implementation: "retrievers.implementations.qa.QAQdrantRetriever"
    inference_provider: "ollama"
    embedding_provider: "ollama"
    config:
      collection: "demo"
      confidence_threshold: 0.3
      score_scaling_factor: 1.0
      max_results: 5
      return_results: 3
      timezone: "America/Toronto"

  - name: "intent-sql-sqlite-contact"
    enabled: false
    type: "retriever"
    datasource: "sqlite"
    adapter: "intent"
    implementation: "retrievers.implementations.intent.IntentSQLiteRetriever"
    embedding_provider: "ollama"
    config:
      # SQLite database path is configured in datasources.yaml
      check_same_thread: false  # Allow multi-threaded access

      # Path to the domain definition file
      domain_config_path: "utils/sql-intent-template/examples/sqlite/contact/contact-domain.yaml"
      template_library_path:
        - "utils/sql-intent-template/examples/sqlite/contact/contact-templates.yaml"

      # Name for the vector store collection for templates
      template_collection_name: "contact_intent_templates"
      # Store configuration - references stores.yaml
      store_name: "chroma"
      confidence_threshold: 0.4

      # Maximum templates to consider
      max_templates: 5

      # Return top N results
      return_results: 10

      # Template loading settings
      reload_templates_on_start: true  # Whether to reload templates on startup
      force_reload_templates: true  # Force reload even if templates exist in storage

      # Unified retriever features
      use_connection_pool: false  # SQLite doesn't support traditional pooling (file-based)
      pool_size: 1  # Not applicable for SQLite
      connection_timeout: 30  # Connection timeout in seconds

      # Query monitoring (automatically provided by unified base)
      enable_query_monitoring: true
      query_timeout: 5000  # 5 seconds

  - name: "intent-sql-postgres"
    enabled: false
    type: "retriever"
    datasource: "postgres"
    adapter: "intent"
    implementation: "retrievers.implementations.intent.IntentPostgreSQLRetriever"
    inference_provider: "ollama"
    model: "gpt-oss:20b"
    embedding_provider: "ollama"
    config:
      # Path to the domain definition file
      domain_config_path: "utils/sql-intent-template/examples/postgres/customer-orders/customer_order_domain.yaml"
      template_library_path:
        - "utils/sql-intent-template/examples/postgres/customer-orders/customer_orders_templates.yaml"
        - "utils/sql-intent-template/examples/postgres/customer-orders/business_intelligence_templates.yaml"
        - "utils/sql-intent-template/examples/postgres/customer-orders/advanced_analytics_templates.yaml"
        - "utils/sql-intent-template/examples/postgres/customer-orders/comparative_analysis_templates.yaml"
      # Name for the vector store collection for templates
      template_collection_name: "intent_query_templates"
      # Store configuration - references stores.yaml
      store_name: "chroma"
      confidence_threshold: 0.4
      # Maximum templates to consider
      max_templates: 5
      # Return top N results
      return_results: 10
      # Template loading settings
      reload_templates_on_start: false  # Whether to reload templates on startup
      force_reload_templates: false  # Force reload even if templates exist in storage

      # Unified retriever features
      use_connection_pool: true  # Enable connection pooling
      pool_size: 5  # Connection pool size
      connection_timeout: 30  # Connection timeout in seconds

      # Query monitoring (automatically provided by new base)
      enable_query_monitoring: true
      query_timeout: 5000  # 5 seconds

  # Elasticsearch Intent Adapter - Application Logs
  # This adapter demonstrates Elasticsearch Query DSL generation from natural language
  # Connection parameters are inherited from config/datasources.yaml
  - name: "intent-elasticsearch-app-logs"
    enabled: false  # Enable when Elasticsearch is configured
    type: "retriever"
    datasource: "elasticsearch"  # References datasources.yaml elasticsearch config
    adapter: "intent"
    implementation: "retrievers.implementations.intent.IntentElasticsearchRetriever"
    inference_provider: "ollama"
    model: "gpt-oss:20b"
    embedding_provider: "ollama"
    config:
      # Domain and template configuration
      domain_config_path: "utils/elasticsearch-intent-template/examples/application-logs/templates/logs_domain.yaml"
      template_library_path:
        - "utils/elasticsearch-intent-template/examples/application-logs/templates/logs_templates.yaml"

      # Vector store configuration for template matching
      template_collection_name: "elasticsearch_logs_templates"
      store_name: "chroma"  # References stores.yaml

      # Intent matching configuration
      confidence_threshold: 0.4
      max_templates: 5
      return_results: 10

      # Template loading settings
      reload_templates_on_start: true
      force_reload_templates: true

      # Elasticsearch-specific configuration
      # Note: Connection parameters (node, auth, verify_certs) are in datasources.yaml
      # Only adapter-specific settings go here
      index_pattern: "application-logs-demo"  # Default index pattern for queries
      use_query_dsl: true  # Enable Query DSL processing
      enable_aggregations: true  # Enable aggregation support
      enable_highlighting: true  # Enable search result highlighting
      default_size: 100  # Default number of results to return

    # Example fault tolerance settings (optional)
    fault_tolerance:
      operation_timeout: 30.0
      failure_threshold: 5
      recovery_timeout: 60.0
      max_retries: 3
      retry_delay: 1.0