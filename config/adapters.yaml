# Adapter configurations for ORBIT
# This file contains all adapter definitions and can be imported by config.yaml
#
# Provider Overrides:
# Each adapter can optionally override the global providers:
#   - inference_provider: Override which LLM to use (e.g., "ollama", "anthropic", "ollama")
#   - embedding_provider: Override which embedding service to use (for retriever adapters)
#   - reranker_provider: Override which reranker to use (NEW - improves retrieval accuracy)
#   - model: Override specific model within a provider

adapters:
  - name: "conversational-passthrough"
    enabled: true
    type: "passthrough"  # New adapter type for non-retrieval adapters
    datasource: "none"  # No actual datasource needed
    adapter: "conversational"
    implementation: "implementations.passthrough.conversational.ConversationalImplementation"
    # Provider overrides (optional - use when you want different providers than global defaults)
    # inference_provider: "ollama"    # Override default inference provider
    # embedding_provider: "ollama"    # Not used for passthrough adapters
    # model: "gpt-oss:20b"            # Specific model for this adapter
    
  # This is an example of a QA adapter for a SQL database.
  # It is used as an example of how to create a QA adapter for a SQL database.
  # Run /examples/sample-db-setup.sh sqlite to create a sample database and api key before using this adapter.
  - name: "qa-sql"
    enabled: false
    type: "retriever"
    datasource: "sqlite"
    adapter: "qa"
    implementation: "retrievers.implementations.qa.QASSQLRetriever"

    # Provider overrides (optional - use when you want different providers than global defaults)
    inference_provider: "ollama"    # Override default inference provider
    model: "granite4:micro"            # Specific model for this adapter
    # reranker_provider: "ollama"     # Override default reranker provider (improves accuracy)
    config:
      # QA-specific settings
      confidence_threshold: 0.3
      max_results: 5         # Retrieve up to 5 documents
      return_results: 3      # Return top 3 after retrieval
      # reranker_top_n: 2      # Optional: limit reranked results (overrides return_results)
      
      # Unified retriever features (available for all SQL adapters)
      use_connection_pool: false  # SQLite doesn't support traditional pooling (file-based)
      pool_size: 1  # Not applicable for SQLite
      connection_timeout: 30  # Connection timeout in seconds
      
      # Query monitoring (automatically provided by unified base)
      enable_query_monitoring: true
      query_timeout: 5000  # 5 seconds
      
      # Security and access control (recommended)
      table: "city"  # Specify the exact table for single-table access
      allowed_columns: ["id", "question", "answer", "category", "confidence"]  # Limit accessible columns
      security_filter: "active = 1"  # Only return active Q&A pairs
      
      # Performance optimization
      cache_ttl: 1800  # Cache results for 30 minutes
      
    # Fault tolerance settings for this adapter. This overrides the default settings in config.yaml
    # Use this as example for other adapters if you need to override the default settings.
    fault_tolerance:
      operation_timeout: 15.0          # Lower timeout for local database operations
      failure_threshold: 10            # Higher threshold for local operations (more reliable)
      recovery_timeout: 30.0           # Short base timeout for local DB
      success_threshold: 5             # Multiple successes to close circuit
      max_recovery_timeout: 120.0      # Max 2 minutes for local DB
      enable_exponential_backoff: true # Enable backoff for local DB
      enable_thread_isolation: false   # No isolation needed for local SQLite operations
      enable_process_isolation: false  # SQLite is lightweight, no process isolation needed
      max_retries: 3                   # Retry failed queries
      retry_delay: 0.5                 # Short delay between retries for local DB
      cleanup_interval: 3600.0         # Clean up stats every hour
      retention_period: 86400.0        # Keep stats for 24 hours
      event_handler:
        type: "default"                # Use default filesystem logger
      
  # This is an example of a QA adapter for a ChromaDB database. (Disabled by default)
  # It is used as an example of how to create a QA adapter for a ChromaDB database.
  - name: "qa-vector-chroma"
    enabled: false
    type: "retriever"
    datasource: "chroma"
    adapter: "qa"
    implementation: "retrievers.implementations.qa.QAChromaRetriever"

    # Provider overrides - this example shows using different providers
    inference_provider: "ollama"
    embedding_provider: "ollama"
    
    config:
      collection: "city"
      confidence_threshold: 0.3
      distance_scaling_factor: 2.0
      max_results: 5         # Retrieve 5 documents from vector store
      return_results: 3      # Return top 3 to LLM
      # reranker_top_n: 3    # Optional: rerank and keep top 3 (improves quality)
      timezone: "America/Toronto"

  - name: "qa-vector-qdrant-demo"
    enabled: false
    type: "retriever"
    datasource: "qdrant"
    adapter: "qa"
    implementation: "retrievers.implementations.qa.QAQdrantRetriever"

    # Provider overrides
    inference_provider: "ollama"      # Use Ollama for inference
    embedding_provider: "ollama"      # Use Ollama for embeddings
    # reranker_provider: "ollama"       # Use Ollama for reranking

    config:
      collection: "demo"
      confidence_threshold: 0.3
      score_scaling_factor: 1.0
      max_results: 5         # Retrieve 5 documents from Qdrant
      return_results: 3      # Return top 3 to LLM
      # reranker_top_n: 3    # Optional: rerank top 3 for best quality
      timezone: "America/Toronto"

  - name: "intent-sql-sqlite-contact"
    enabled: false
    type: "retriever"
    datasource: "sqlite"
    adapter: "intent"
    implementation: "retrievers.implementations.intent.IntentSQLiteRetriever"

    # Provider overrides - intent adapters benefit from powerful models
    inference_provider: "ollama"    # Cloud LLM for complex intent classification
    model: "gpt-oss:20b-"           # Large model for better intent understanding
    embedding_provider: "ollama"          # Local embeddings for template matching
    # reranker_provider: "ollama"           # Optional: Jina AI reranker for template relevance

    config:
      # SQLite database path is configured in datasources.yaml
      check_same_thread: false  # Allow multi-threaded access

      # Path to the domain definition file
      domain_config_path: "utils/sql-intent-template/examples/sqlite/contact/contact-domain.yaml"
      template_library_path:
        - "utils/sql-intent-template/examples/sqlite/contact/contact-templates.yaml"

      # Name for the vector store collection for templates
      template_collection_name: "contact_intent_templates"
      # Store configuration - references stores.yaml
      store_name: "chroma"
      confidence_threshold: 0.4

      # Maximum templates to consider
      max_templates: 5

      # Return top N results
      return_results: 10

      # Template loading settings
      reload_templates_on_start: true  # Whether to reload templates on startup
      force_reload_templates: true  # Force reload even if templates exist in storage

      # Unified retriever features
      use_connection_pool: false  # SQLite doesn't support traditional pooling (file-based)
      pool_size: 1  # Not applicable for SQLite
      connection_timeout: 30  # Connection timeout in seconds

      # Query monitoring (automatically provided by unified base)
      enable_query_monitoring: true
      query_timeout: 5000  # 5 seconds

  - name: "intent-sql-sqlite-classified"
    enabled: false
    type: "retriever"
    datasource: "sqlite"
    adapter: "intent"
    implementation: "retrievers.implementations.intent.IntentSQLiteRetriever"
    database: "../demos/classified-data/classified_data.db"
    inference_provider: "ollama"
    model: "granite4:micro"
    embedding_provider: "ollama"
    # reranker_provider: "ollama"
    config:
      # reranker_top_n: 3      # Optional: limit reranked results (overrides return_results)
      check_same_thread: false  # Allow multi-threaded access

      # Path to the domain definition file
      domain_config_path: "utils/sql-intent-template/examples/sqlite/classified-data/classified_data_domain.yaml"
      template_library_path:
        - "utils/sql-intent-template/examples/sqlite/classified-data/classified_data_templates.yaml"

      # Name for the vector store collection for templates
      template_collection_name: "classified_data_intent_templates"
      # Store configuration - references stores.yaml
      store_name: "chroma"
      confidence_threshold: 0.4

      # Maximum templates to consider
      max_templates: 5

      # Return top N results
      return_results: 100

      # Template loading settings
      reload_templates_on_start: false  # Whether to reload templates on startup
      force_reload_templates: false  # Force reload even if templates exist in storage

      # Unified retriever features
      use_connection_pool: false  # SQLite doesn't support traditional pooling (file-based)
      pool_size: 1  # Not applicable for SQLite
      connection_timeout: 30  # Connection timeout in seconds

      # Query monitoring (automatically provided by unified base)
      enable_query_monitoring: true
      query_timeout: 5000  # 5 seconds
  
  - name: "intent-sql-postgres"
    enabled: false
    type: "retriever"
    datasource: "postgres"
    adapter: "intent"
    implementation: "retrievers.implementations.intent.IntentPostgreSQLRetriever"
    inference_provider: "ollama"
    model: "granite4:micro"
    embedding_provider: "ollama"
    # reranker_provider: "ollama"
    config:
      # Path to the domain definition file
      domain_config_path: "utils/sql-intent-template/examples/postgres/customer-orders/customer_order_domain.yaml"
      template_library_path:
        - "utils/sql-intent-template/examples/postgres/customer-orders/customer_orders_templates.yaml"
        - "utils/sql-intent-template/examples/postgres/customer-orders/business_intelligence_templates.yaml"
        - "utils/sql-intent-template/examples/postgres/customer-orders/advanced_analytics_templates.yaml"
        - "utils/sql-intent-template/examples/postgres/customer-orders/comparative_analysis_templates.yaml"
      # Name for the vector store collection for templates
      # reranker_top_n: 3      # Optional: limit reranked results (overrides return_results)
      template_collection_name: "intent_query_templates"
      # Store configuration - references stores.yaml
      store_name: "chroma"
      confidence_threshold: 0.4
      # Maximum templates to consider
      max_templates: 5
      # Return top N results
      return_results: 10

      # Template loading settings
      reload_templates_on_start: false  # Whether to reload templates on startup
      force_reload_templates: false  # Force reload even if templates exist in storage

      # Unified retriever features
      use_connection_pool: true  # Enable connection pooling
      pool_size: 5  # Connection pool size
      connection_timeout: 30  # Connection timeout in seconds

      # Query monitoring (automatically provided by new base)
      enable_query_monitoring: true
      query_timeout: 5000  # 5 seconds

  # Elasticsearch Intent Adapter - Application Logs
  # This adapter demonstrates Elasticsearch Query DSL generation from natural language
  # Connection parameters are inherited from config/datasources.yaml
  - name: "intent-elasticsearch-app-logs"
    enabled: false
    type: "retriever"
    datasource: "elasticsearch"  # References datasources.yaml elasticsearch config
    adapter: "intent"
    implementation: "retrievers.implementations.intent.IntentElasticsearchRetriever"
    inference_provider: "ollama"
    model: "granite4:micro"
    embedding_provider: "ollama"
    # reranker_provider: "ollama"
    config:
      # Domain and template configuration
      domain_config_path: "utils/elasticsearch-intent-template/examples/application-logs/templates/logs_domain.yaml"
      template_library_path:
        - "utils/elasticsearch-intent-template/examples/application-logs/templates/logs_templates.yaml"

      # reranker_top_n: 3      # Optional: limit reranked results (overrides return_results)
      # Vector store configuration for template matching
      template_collection_name: "elasticsearch_logs_templates"
      store_name: "chroma"  # References stores.yaml

      # Intent matching configuration
      confidence_threshold: 0.4
      max_templates: 5
      return_results: 10

      # Template loading settings
      reload_templates_on_start: true
      force_reload_templates: true

      # Elasticsearch-specific configuration
      # Note: Connection parameters (node, auth, verify_certs) are in datasources.yaml
      # Only adapter-specific settings go here
      index_pattern: "application-logs-demo"  # Default index pattern for queries
      use_query_dsl: true  # Enable Query DSL processing
      enable_aggregations: false  # Enable aggregation support
      enable_highlighting: false  # Enable search result highlighting
      default_size: 100  # Default number of results to return

    # Example fault tolerance settings (optional)
    fault_tolerance:
      operation_timeout: 30.0
      failure_threshold: 5
      recovery_timeout: 60.0
      max_retries: 3
      retry_delay: 1.0

  # HTTP JSON API Adapter - JSONPlaceholder (Simple Testing API)
  # This adapter uses a fake REST API for testing and debugging HTTP adapter functionality
  # No authentication required - perfect for isolating parameter extraction issues
  - name: "intent-http-jsonplaceholder"
    enabled: false
    type: "retriever"
    datasource: "http"  # Uses HTTP datasource placeholder
    adapter: "intent"
    implementation: "retrievers.implementations.intent.IntentHTTPJSONRetriever"
    inference_provider: "ollama"
    model: "granite4:micro"
    embedding_provider: "ollama"
    config:
      # Domain and template configuration
      domain_config_path: "utils/http-intent-template/examples/jsonplaceholder/templates/jsonplaceholder_domain.yaml"
      template_library_path:
        - "utils/http-intent-template/examples/jsonplaceholder/templates/jsonplaceholder_templates.yaml"

      # Vector store configuration for template matching
      template_collection_name: "jsonplaceholder_http_templates"
      store_name: "chroma"  # References stores.yaml

      # Intent matching configuration
      confidence_threshold: 0.4
      max_templates: 5
      return_results: 10
      verbose: false  # Enable debug logging

      # Template loading settings
      reload_templates_on_start: true
      force_reload_templates: true

      # HTTP-specific configuration
      base_url: "https://jsonplaceholder.typicode.com"
      default_timeout: 30
      enable_retries: true
      max_retries: 3
      retry_delay: 1.0

      # No authentication required for JSONPlaceholder

    # Fault tolerance settings
    fault_tolerance:
      operation_timeout: 30.0
      failure_threshold: 5
      recovery_timeout: 60.0
      max_retries: 3
      retry_delay: 1.0

  # Firecrawl Intent Adapter - Web Scraping with vector chunking
  # This adapter demonstrates web scraping using Firecrawl with natural language queries
  # Supports both cloud API (api.firecrawl.dev) and self-hosted Firecrawl deployments
  # Features content chunking for large documents (e.g., Wikipedia articles)
  - name: "intent-firecrawl-webscrape"
    enabled: false
    type: "retriever"
    datasource: "http"
    adapter: "intent"
    implementation: "retrievers.implementations.intent.IntentFirecrawlRetriever"
    inference_provider: "ollama"
    model: "granite4:micro"
    embedding_provider: "ollama"  # Used for chunk ranking
    config:
      domain_config_path: "utils/firecrawl-intent-template/examples/web-scraping/templates/firecrawl_domain.yaml"
      template_library_path:
        - "utils/firecrawl-intent-template/examples/web-scraping/templates/firecrawl_templates.yaml"

      # Vector store for template matching
      template_collection_name: "firecrawl_test_templates"  # Using test collection name
      store_name: "chroma"

      # Intent matching (lower threshold for testing)
      confidence_threshold: 0.3
      max_templates: 5
      return_results: 1

      # Template loading
      reload_templates_on_start: true
      force_reload_templates: true

      # Enable verbose logging for debugging
      verbose: true

      # Firecrawl configuration
      # For cloud API: set base_url to https://api.firecrawl.dev/v1
      # For self-hosted: set to your instance URL
      base_url: "https://api.firecrawl.dev/v1"
      default_timeout: 60  # Increased for large pages
      default_formats: ["markdown"]

      # Authentication (for cloud API)
      auth:
        type: "bearer_token"
        token_env: "FIRECRAWL_API_KEY"
        header_name: "Authorization"
        token_prefix: "Bearer"

      # ========================================
      # Content Chunking Configuration
      # ========================================
      # Automatically chunks large web content to prevent exceeding LLM context limits
      # and improve response relevance through semantic search

      enable_chunking: true                    # Enable/disable chunking
      max_chunk_tokens: 4000                   # Maximum tokens per chunk (~16KB)
      chunk_overlap_tokens: 200                # Overlap between chunks for context continuity
      min_chunk_tokens: 500                    # Minimum chunk size

      # Embedding model limits (CRITICAL: Set based on your embedding provider)
      # OpenAI text-embedding-3-*: 8191 tokens → Use 7500 for safety
      # OpenAI text-embedding-ada-002: 8191 tokens → Use 7500 for safety
      # Cohere embed-english-v3.0: 512 tokens → Use 450 for safety!
      # Jina jina-embeddings-v3: 8192 tokens → Use 7500 for safety
      max_embedding_tokens: 7500               # Max tokens with safety buffer (accounts for estimation error)

      # Chunk storage and retrieval
      chunks_collection: "firecrawl_chunks"    # Vector store collection for chunks
      chunk_cache_ttl_hours: 24                # Cache duration (24 hours for Wikipedia)

      # Chunk ranking and selection
      top_chunks_to_return: 3                  # Number of most relevant chunks to return
      min_chunk_similarity: 0.3                # Minimum similarity score for chunk retrieval

    fault_tolerance:
      operation_timeout: 60.0  # Increased for large content
      failure_threshold: 5
      recovery_timeout: 60.0
      max_retries: 2
      retry_delay: 2.0

  # MongoDB Intent Retriever for Sample MFlix Database
  - name: "intent-mongodb-mflix"
    enabled: false
    type: "retriever"
    datasource: "mongodb"
    adapter: "intent"
    implementation: "retrievers.implementations.intent.intent_mongodb_retriever.IntentMongoDBRetriever"
    inference_provider: "ollama"
    model: "granite4:micro"
    embedding_provider: "ollama"
    # reranker_provider: "ollama"
    config:
      # reranker_top_n: 3
      # Domain and template configuration
      domain_config_path: "utils/mongodb-intent-template/examples/sample_mflix/templates/mflix_domain.yaml"
      template_library_path:
        - "utils/mongodb-intent-template/examples/sample_mflix/templates/mflix_templates.yaml"
        - "utils/mongodb-intent-template/examples/sample_mflix/templates/mflix_advanced_templates.yaml"

      # Vector store configuration for template matching
      template_collection_name: "intent_mongodb_templates"
      store_name: "chroma"  # References stores.yaml

      # Intent matching configuration
      confidence_threshold: 0.4
      max_templates: 5
      return_results: 10

      # Template loading settings
      reload_templates_on_start: true
      force_reload_templates: false

      # MongoDB-specific configuration
      # Note: Connection parameters (connection_string, host, port, auth) are in datasources.yaml
      # Only adapter-specific settings go here
      database: "sample_mflix"  # Database name (can override datasource default)
      default_collection: "movies"  # Default collection for queries
      default_limit: 100  # Default number of results to return
      max_limit: 1000  # Maximum allowed limit
      enable_text_search: true  # Enable text search with regex
      case_insensitive_regex: true  # Case-insensitive regex by default

      # Placeholder base_url to satisfy parent class
      base_url: "http://localhost:27017"

    # Fault tolerance settings
    fault_tolerance:
      operation_timeout: 15.0
      failure_threshold: 10
      recovery_timeout: 30.0
      success_threshold: 5
      max_recovery_timeout: 120.0
      enable_exponential_backoff: true
      enable_thread_isolation: false
      enable_process_isolation: false
      max_retries: 3
      retry_delay: 1.0
      cleanup_interval: 3600.0
      retention_period: 86400.0
      event_handler:
        type: "default"

  # File Adapter - Document Q&A
  # Supports uploading and querying files (PDF, DOCX, CSV, TXT, HTML, JSON)
  # Uses dual-path strategy: vector stores for documents, DuckDB for structured data
  - name: "file-document-qa"
    enabled: false
    type: "retriever"
    datasource: "none"  # File adapter manages its own storage, no external datasource needed
    adapter: "file"
    implementation: "retrievers.implementations.file.file_retriever.FileVectorRetriever"

    # Provider overrides
    inference_provider: "ollama"
    embedding_provider: "ollama"
    vision_provider: "gemini"  # Vision provider for image files: openai, gemini, anthropic (see vision.yaml)

    config:
      # Storage configuration
      storage_backend: "filesystem"  # Future: "s3", "minio"
      storage_root: "./uploads"
      max_file_size: 52428800  # 50MB
      
      # Processing configuration
      chunking_strategy: "semantic"  # "fixed" or "semantic"
      chunk_size: 1000
      chunk_overlap: 200
      
      # Vector store integration
      vector_store: "chroma"  # References stores.yaml
      collection_prefix: "files_"
      
      # Supported file types
      supported_types:
        - "application/pdf"
        - "text/plain"
        - "text/markdown"
        - "text/csv"
        - "application/json"
        - "text/html"
        - "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        - "application/vnd.openxmlformats-officedocument.presentationml.presentation"  # PPTX (via Docling)
        - "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"  # XLSX (via Docling)
        - "image/png"
        - "image/jpeg"
        - "image/tiff"
        - "audio/wav"
        - "audio/mpeg"
        - "text/vtt"
      
      # Q&A settings
      confidence_threshold: 0.3
      max_results: 5
      return_results: 3
      
      # DuckDB integration for structured data (CSV, Parquet)
      enable_duckdb_path: true
      duckdb_store: "duckdb"